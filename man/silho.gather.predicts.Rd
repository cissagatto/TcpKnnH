% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testSilho.R
\name{silho.gather.predicts}
\alias{silho.gather.predicts}
\title{Gather Predictions from KNN Models}
\usage{
silho.gather.predicts(parameters)
}
\arguments{
\item{parameters}{A list containing the necessary parameters:
\itemize{
\item \code{Number.Folds}: (integer) Number of folds for cross-validation.
\item \code{Folders}: (list) Paths to different directories:
\itemize{
\item \code{folderPartitions}: Path to partition data.
\item \code{folderTestSilho}: Path to test data.
\item \code{folderCommunities}: Path to community data.
}
\item \code{Choosed}: (list) Selected methods and partitions:
\itemize{
\item \code{all.methods.choosed}: Data frame with selected methods.
\item \code{all.partitions.choosed}: Data frame with selected partitions.
}
\item \code{best.silhouette}: (list) Best silhouette results:
\itemize{
\item \code{all.silhouette}: Data frame containing the best silhouette values.
}
}}
}
\value{
No return value; results are saved as CSV files in the respective directories.
}
\description{
This function gathers predictions from multiple KNN models across different folds.
It reads prediction files, aggregates results, and removes temporary files.
}
\details{
The function iterates over the specified number of folds and KNN models.
For each model, it reads true labels (\code{y_true.csv}) and predicted labels (\code{y_predict.csv}),
aggregates the results, and writes them back to a consolidated CSV file.
Temporary files are removed to free up space.
}
\examples{
\dontrun{
parameters <- list(
  Number.Folds = 5,
  Folders = list(
    folderPartitions = "/path/to/partitions",
    folderTestSilho = "/path/to/test_silho",
    folderCommunities = "/path/to/communities"
  ),
  Choosed = list(
    all.methods.choosed = data.frame(split = c(1, 2, 3), sparsification = c("knn-1", "knn-2", "knn-3")),
    all.partitions.choosed = data.frame(fold = c(1, 2, 3), knn = c(1, 2, 3))
  ),
  best.silhouette = list(
    all.silhouette = data.frame(fold = c(1, 2, 3), knn = c(1, 2, 3), part = c(5, 6, 7))
  )
)
silho.gather.predicts(parameters)
}

}
